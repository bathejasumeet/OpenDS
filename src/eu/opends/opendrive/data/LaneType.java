//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.11.16 at 11:33:23 AM CET 
//


package eu.opends.opendrive.data;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for laneType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="laneType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="none"/>
 *     &lt;enumeration value="driving"/>
 *     &lt;enumeration value="stop"/>
 *     &lt;enumeration value="shoulder"/>
 *     &lt;enumeration value="biking"/>
 *     &lt;enumeration value="sidewalk"/>
 *     &lt;enumeration value="border"/>
 *     &lt;enumeration value="restricted"/>
 *     &lt;enumeration value="parking"/>
 *     &lt;enumeration value="bidirectional"/>
 *     &lt;enumeration value="median"/>
 *     &lt;enumeration value="special1"/>
 *     &lt;enumeration value="special2"/>
 *     &lt;enumeration value="special3"/>
 *     &lt;enumeration value="roadWorks"/>
 *     &lt;enumeration value="tram"/>
 *     &lt;enumeration value="rail"/>
 *     &lt;enumeration value="entry"/>
 *     &lt;enumeration value="exit"/>
 *     &lt;enumeration value="offRamp"/>
 *     &lt;enumeration value="onRamp"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "laneType")
@XmlEnum
public enum LaneType {

    @XmlEnumValue("none")
    NONE("none"),
    @XmlEnumValue("driving")
    DRIVING("driving"),
    @XmlEnumValue("stop")
    STOP("stop"),
    @XmlEnumValue("shoulder")
    SHOULDER("shoulder"),
    @XmlEnumValue("biking")
    BIKING("biking"),
    @XmlEnumValue("sidewalk")
    SIDEWALK("sidewalk"),
    @XmlEnumValue("border")
    BORDER("border"),
    @XmlEnumValue("restricted")
    RESTRICTED("restricted"),
    @XmlEnumValue("parking")
    PARKING("parking"),
    @XmlEnumValue("bidirectional")
    BIDIRECTIONAL("bidirectional"),
    @XmlEnumValue("median")
    MEDIAN("median"),
    @XmlEnumValue("special1")
    SPECIAL_1("special1"),
    @XmlEnumValue("special2")
    SPECIAL_2("special2"),
    @XmlEnumValue("special3")
    SPECIAL_3("special3"),
    @XmlEnumValue("roadWorks")
    ROAD_WORKS("roadWorks"),
    @XmlEnumValue("tram")
    TRAM("tram"),
    @XmlEnumValue("rail")
    RAIL("rail"),
    @XmlEnumValue("entry")
    ENTRY("entry"),
    @XmlEnumValue("exit")
    EXIT("exit"),
    @XmlEnumValue("offRamp")
    OFF_RAMP("offRamp"),
    @XmlEnumValue("onRamp")
    ON_RAMP("onRamp");
    private final String value;

    LaneType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static LaneType fromValue(String v) {
        for (LaneType c: LaneType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
